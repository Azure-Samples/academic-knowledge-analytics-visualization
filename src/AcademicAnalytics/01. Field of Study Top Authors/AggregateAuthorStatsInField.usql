// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// To do:
//   1. Run samples/CreateFunctions.usql to define functions before running this script
//   2. Replace <AzureStorageAccount> with your Azure Storage account containing MAG dataset
//   3. Replace <MagContainer> with the container name in Azure Storage account containing MAG dataset, usually in the form of mag-yyyy-mm-dd
//

DECLARE @blobAccount     string = "<AzureStorageAccount>";
DECLARE @blobContainer   string = "<MagContainer>";
DECLARE @uriPrefix       string = "wasb://" + @blobContainer + "@" + @blobAccount + "/";

//*******************Input Variable Section********************************
//        Change these variables for different calculations
//*************************************************************************
DECLARE @fieldName string = "computer science";
DECLARE @fieldTopAuthorsCount int = 100;  //Number of top authors to output

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @fieldAnalyticsBaseDir string = @"/output/fieldAnalytics/";
DECLARE @outputBaseDir string = @fieldAnalyticsBaseDir + Uri.EscapeUriString(@fieldName) + "/"; //Uri encode the field name since there may be spaces

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @fieldTopAuthorsOutPath string = @outputBaseDir + @"topAuthors.tsv";


// Load Academic Graph data
@fieldsOfStudy = FieldsOfStudy(@uriPrefix);
@paperFieldsOfStudy = PaperFieldsOfStudy(@uriPrefix);
@paperReferences = PaperReferences(@uriPrefix);
@paperAuthorAffiliations = PaperAuthorAffiliations(@uriPrefix);
@authors = Authors(@uriPrefix);


//Get all paperIds for the field
@fieldPaperIds =
    SELECT @paperFieldsOfStudy.PaperId
    FROM @fieldsOfStudy
         INNER JOIN
             @paperFieldsOfStudy
         ON @fieldsOfStudy.FieldOfStudyId == @paperFieldsOfStudy.FieldOfStudyId
    WHERE @fieldsOfStudy.NormalizedName == @fieldName;


//Get all [citing paper] -> [field paper] relationships
@fieldCitations =
    SELECT @paperReferences.PaperId,
           @paperReferences.PaperReferenceId 
    FROM @paperReferences
         INNER JOIN
             @fieldPaperIds
         ON @fieldPaperIds.PaperId == @paperReferences.PaperReferenceId;


//For each field paper, count incoming reference to get citation count
@fieldPapersWithCitationCount =
    SELECT @fieldCitations.PaperReferenceId AS PaperId,
           COUNT( * ) AS CitationCount
    FROM @fieldCitations
    GROUP BY @fieldCitations.PaperReferenceId;


//Get top authors by citation count
@fieldAuthors =
    SELECT @authors.AuthorId,
           ANY_VALUE(@authors.DisplayName) AS AuthorName, //Guaranteed to have only 1 value since AuthorId is the key
           COUNT( @fieldPapersWithCitationCount.PaperId ) AS PublicationCount,
           SUM(@fieldPapersWithCitationCount.CitationCount) AS CitationCount
    FROM @fieldPapersWithCitationCount
         //First join against PaperAuthorAffiliation to get field paper -> field author relationship.
         JOIN
             @paperAuthorAffiliations
         ON @paperAuthorAffiliations.PaperId == @fieldPapersWithCitationCount.PaperId
         //Then join against Author to get detail author information.
         JOIN
            @authors   
         ON @paperAuthorAffiliations.AuthorId == @authors.AuthorId
    //Aggregate over authorId to cacluate publication/ciation count for each author
    GROUP BY @authors.AuthorId
    ORDER BY CitationCount DESC
    FETCH @fieldTopAuthorsCount ROWS;


OUTPUT @fieldAuthors
TO  @fieldTopAuthorsOutPath
USING Outputters.Tsv(outputHeader:true);