//Make sure to run CreateDatabase script from common scripts first!
USE DATABASE AcdemicGraph;

//Change this variable to do calculation for different conferences
DECLARE @conferenceShortName string = "WWW";  

//This output path is hardcoded to pbi file. If this is changed, pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/"; 
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + @conferenceShortName + "/";

//Files output from this script
DECLARE @venueOutPath string =  @outputBaseDir + "venue.tsv";
DECLARE @conferenceIncomingCitationsByVenueOutPath string = @outputBaseDir + "conferenceIncomingCitationsByVenue.tsv";
DECLARE @conferenceYearlyIncomingCitationsByVenueOutPath string = @outputBaseDir + "conferenceYearlyIncomingCitationsByVenue.tsv";


//The visualization can join against this table to get venue information. Since this isn't a large set of data, we can directly output it
//Venue is either a conference series or journal in Microsoft Academic Graph
@venues =
    SELECT ConferenceSeries.ConferenceSeriesId AS VenueId,
           ConferenceSeries.NormalizedName AS VenueShortName,
           ConferenceSeries.DisplayName AS VenueName
    FROM ConferenceSeries
    UNION 
    SELECT Journal.JournalId AS VenueId,
           Journal.NormalizedName AS VenueShortName,
           Journal.DisplayName AS VenueName
    FROM Journal;

OUTPUT @venues
TO @venueOutPath
USING Outputters.Tsv(outputHeader : true);

//Get all conference papers. 
//Cast ConferenceSeriesId to long from long? so join operations can be performed.
@allconferencePapers =
    SELECT PaperId,
           Year,
           (long)ConferenceSeriesId AS ConferenceSeriesId  //Cast from long? to long
    FROM Paper
    WHERE ConferenceSeriesId IS NOT NULL;

//Get all conference papers by normalized conference series name
@conferencePapers =
    SELECT @allconferencePapers.PaperId,
           @allconferencePapers.Year,
           @allconferencePapers.ConferenceSeriesId AS VenueId
    FROM @allconferencePapers
         JOIN
             ConferenceSeries
         ON  @allconferencePapers.ConferenceSeriesId == ConferenceSeries.ConferenceSeriesId
    WHERE ConferenceSeries.NormalizedName == @conferenceShortName;

//Get relationships between [citing paper] -> [conference paper]
@conferencePaperCitations =
    SELECT @conferencePapers.PaperId,
           @conferencePapers.Year,
           @conferencePapers.VenueId,
           Paper.PaperId AS CitationId,
           //Use conferenceSeriesId as VenueId if present, otherwise, use JournalId. Note that there are papers published both in conference and journal. We will use the conference as the paper's venue in this case
           Paper.ConferenceSeriesId == null ? JournalId : ConferenceSeriesId AS CitationVenueId 
    FROM Paper
         JOIN
             PaperReference
         ON Paper.PaperId == PaperReference.PaperId
         JOIN
             @conferencePapers
         ON PaperReference.PaperReferenceId == @conferencePapers.PaperId;

//Count the number of citations between citing conference and conference
//Keep VenueId and CitationVenueId such that the visulization can join directly with Venue table to get venue names
@conferencePaperCitationsByVenue =
    SELECT @conferencePaperCitations.VenueId,
           @conferencePaperCitations.CitationVenueId,
           COUNT( * ) AS CitationCount
    FROM @conferencePaperCitations
    GROUP BY @conferencePaperCitations.VenueId,
             @conferencePaperCitations.CitationVenueId;

OUTPUT @conferencePaperCitationsByVenue
TO @conferenceIncomingCitationsByVenueOutPath
USING Outputters.Tsv(outputHeader : true);

//For each yeah of conference, count the number of citations between citing conference and conference
//Keep VenueId and CitationVenueId such that the visulization can join directly with Venue table to get venue names
@conferencePaperCitationsByYearCitationVenue =
    SELECT @conferencePaperCitations.CitationVenueId,
           @conferencePaperCitations.Year,
           COUNT( * ) AS CitationCount
    FROM @conferencePaperCitations
    GROUP BY @conferencePaperCitations.CitationVenueId,
             @conferencePaperCitations.Year;

OUTPUT @conferencePaperCitationsByYearCitationVenue
TO @conferenceYearlyIncomingCitationsByVenueOutPath
USING Outputters.Tsv(outputHeader : true);