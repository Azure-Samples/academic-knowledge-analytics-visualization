// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//Make sure to run CreateDatabase script from common scripts first!
USE DATABASE AcademicGraph;

//*******************Input Variable Section********************************
//        Change these variables for different calculations
//*************************************************************************
DECLARE @conferenceShortName string = "WWW"; //Conference abbreviated name 

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/";
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + @conferenceShortName + "/";

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @conferenceBasicStatsOutPath string = @outputBaseDir + "conferenceBasicStats.tsv";

	
	
	
//First find the conference series id by matching conference short name.
@targetConferenceSeriesId =
    SELECT (long?) ConferenceSeriesId AS ConferenceSeriesId //Cast long to long? to join against Paper table
    FROM ConferenceSeries
    WHERE NormalizedName == @conferenceShortName;


//Get all conference papers by conference series Id.
@conferencePapers =
    SELECT Papers.PaperId,
           Papers.Year,
           Papers.CitationCount,
           Papers.ConferenceSeriesId AS VenueId
    FROM Papers
         INNER JOIN
             @targetConferenceSeriesId
         ON Papers.ConferenceSeriesId == @targetConferenceSeriesId.ConferenceSeriesId;
 
 
//Get all reference from [Conference Paper] -> [Referenced Paper]
@conferenceReferencedPapers =
    SELECT @conferencePapers.PaperId,
           @conferencePapers.Year,
           Papers.PaperId AS ReferenceId
    FROM Papers
         INNER JOIN
             PaperReferences
         ON Papers.PaperId == PaperReferences.PaperReferenceId
         INNER JOIN
             @conferencePapers
         ON PaperReferences.PaperId == @conferencePapers.PaperId;


//Get total reference count for each year
@conferenceReferenceStats =
    SELECT COUNT( * ) AS ReferenceCount,
           Year
    FROM @conferenceReferencedPapers
    GROUP BY Year;


//Get total publication/citation count for each year
@conferencePaperCitationStats =
    SELECT COUNT( * ) AS PublicationCount,
           SUM(@conferencePapers.CitationCount) AS CitationCount,
           @conferencePapers.Year
    FROM @conferencePapers
    GROUP BY Year;


@conferencePaperStats =
    SELECT @conferencePaperCitationStats.Year,
           @conferencePaperCitationStats.PublicationCount AS PublicationCount,
           //Cast to float first before division to ensure fractions are calculated correctly
           (float)@conferencePaperCitationStats.CitationCount / @conferencePaperCitationStats.PublicationCount AS AverageCitationCount,
           (float)@conferenceReferenceStats.ReferenceCount / @conferencePaperCitationStats.PublicationCount AS AverageReferenceCount
    FROM @conferencePaperCitationStats
         INNER JOIN
             @conferenceReferenceStats
         ON @conferencePaperCitationStats.Year == @conferenceReferenceStats.Year;


OUTPUT @conferencePaperStats
TO @conferenceBasicStatsOutPath
USING Outputters.Tsv(outputHeader : true);