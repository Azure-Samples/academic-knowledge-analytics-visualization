// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// To do:
//   1. Run samples/CreateFunctions.usql to define functions before running this script
//   2. Replace <AzureStorageAccount> with your Azure Storage account containing MAG dataset
//   3. Replace <MagContainer> with the container name in Azure Storage account containing MAG dataset, usually in the form of mag-yyyy-mm-dd
//

DECLARE @blobAccount     string = "<AzureStorageAccount>";
DECLARE @blobContainer   string = "<MagContainer>";
DECLARE @uriPrefix       string = "wasb://" + @blobContainer + "@" + @blobAccount + "/";

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @fieldAnalyticsBaseDir string = @"/output/fieldAnalytics/";
DECLARE @outputBaseDir string = @fieldAnalyticsBaseDir;

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @entityCountPerYear_fos_outpath string =  @outputBaseDir + "entityCountPerYearByFOS.tsv";
DECLARE @fosDetails_outpath string =  @outputBaseDir + "fosDetails.tsv";


// Load Academic Graph data
@papers = Papers(@uriPrefix);
@paperFieldsOfStudy = PaperFieldsOfStudy(@uriPrefix);
@paperAuthorAffiliations = PaperAuthorAffiliations(@uriPrefix);
@fieldsOfStudy = FieldsOfStudy(@uriPrefix);


//Get all [Paper] -> [FieldOfStudy] -> [Author] -> [Affiliation] relationships
@paperAuthorAffiliationFieldsOfStudy =
    SELECT @paperFieldsOfStudy.FieldOfStudyId,
           @paperFieldsOfStudy.PaperId,
           @paperAuthorAffiliations.AuthorId,
           @paperAuthorAffiliations.AffiliationId,
           @papers.JournalId,
           @papers.ConferenceSeriesId,
           @papers.Year
    FROM @papers
         INNER JOIN
             @paperFieldsOfStudy
         ON @papers.PaperId == @paperFieldsOfStudy.PaperId
         INNER JOIN
             @paperAuthorAffiliations
         ON @papers.PaperId == @paperAuthorAffiliations.PaperId;


//Get distinct affiliation, author, journal and confernece count for each field of study by year
@authorAffiliationJournalConferenceCountByYearAndFos =
    SELECT COUNT(DISTINCT AffiliationId) AS AffiliationCount,
           COUNT(DISTINCT AuthorId) AS AuthorCount,
           COUNT(DISTINCT JournalId) AS JournalCount,
           COUNT(DISTINCT ConferenceSeriesId) AS ConferenceCount,
           Year,
           FieldOfStudyId
    FROM @paperAuthorAffiliationFieldsOfStudy
    GROUP BY Year,
             FieldOfStudyId;


//Re-format result from {FieldOfStudyId, Year, AuthorCount, AffiliationCount, JournalCount, ConferenceCount} to {FieldOfStudyId, Year, Count, EntityType} for easier consumption by visual components.
@entityStatsByYearAndFos =
    SELECT FieldOfStudyId,
           Year,
           "Affiliation" AS EntityType,
           AffiliationCount AS Count         
    FROM @authorAffiliationJournalConferenceCountByYearAndFos
        UNION ALL
    SELECT FieldOfStudyId,
           Year,
           "Author" AS EntityType,
           AuthorCount AS Count
    FROM @authorAffiliationJournalConferenceCountByYearAndFos
        UNION ALL
    SELECT FieldOfStudyId,
           Year,
           "Journal" AS EntityType,
           JournalCount AS Count
    FROM @authorAffiliationJournalConferenceCountByYearAndFos
         UNION ALL
    SELECT FieldOfStudyId,
           Year,
           "Conference" AS EntityType,
           ConferenceCount AS Count
    FROM @authorAffiliationJournalConferenceCountByYearAndFos;


OUTPUT @entityStatsByYearAndFos
TO @entityCountPerYear_fos_outpath
USING Outputters.Tsv(outputHeader : true);


//output all [FieldOfStudyId, Name] for easier lookup in visuals
@fieldsOfStudyOut =
    SELECT FieldOfStudyId,
           NormalizedName AS Name
    FROM @fieldsOfStudy;


OUTPUT @fieldsOfStudyOut
TO @fosDetails_outpath
USING Outputters.Tsv(outputHeader : true);