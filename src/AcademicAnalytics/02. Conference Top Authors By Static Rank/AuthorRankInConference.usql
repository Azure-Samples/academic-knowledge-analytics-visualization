// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// To do:
//   1. Run samples/CreateFunctions.usql to define functions before running this script
//   2. Replace <AzureStorageAccount> with your Azure Storage account containing MAG dataset
//   3. Replace <MagContainer> with the container name in Azure Storage account containing MAG dataset, usually in the form of mag-yyyy-mm-dd
//

DECLARE @blobAccount     string = "<AzureStorageAccount>";
DECLARE @blobContainer   string = "<MagContainer>";
DECLARE @uriPrefix       string = "wasb://" + @blobContainer + "@" + @blobAccount + "/";

//*******************Input Variable Section********************************
//        Change these variables for different calculations
//*************************************************************************
DECLARE @conferenceShortName string = "WWW"; //Conference abbreviated name 
DECLARE @conferenceTopAuthorsCount int = 20;  //Number of top authors to output

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/";
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + @conferenceShortName + "/";

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @authorRankOutPath string = @outputBaseDir + "conferenceTopAuthorsByStaticRank.tsv";


// Load Academic Graph data
@conferenceSeries = ConferenceSeries(@uriPrefix);
@papers = Papers(@uriPrefix);
@authors = Authors(@uriPrefix);
@paperAuthorAffiliations = PaperAuthorAffiliations(@uriPrefix);


//First find the conference series id by matching conference short name.
@targetConferenceSeriesId =
    SELECT (long?) ConferenceSeriesId AS ConferenceSeriesId //Cast long to long? to join against Paper table
    FROM @conferenceSeries
    WHERE NormalizedName == @conferenceShortName;


//Get all conference papers by conference series Id.
@conferencePapers =
    SELECT @papers.PaperId,
           (@papers.Rank * -0.001) AS LogProbRank //Rank is stored in the graph as LogProbRank*-1000
    FROM @papers
         INNER JOIN
             @targetConferenceSeriesId
         ON @papers.ConferenceSeriesId == @targetConferenceSeriesId.ConferenceSeriesId;


//Get all [conference paper] -> [conference author] relationships
@conferenceAuthorsPapers =
    SELECT @authors.DisplayName AS AuthorName,
           @authors.AuthorId,
           @conferencePapers.PaperId,
           @conferencePapers.LogProbRank AS LogProbRank 
    FROM @conferencePapers
         INNER JOIN
             @paperAuthorAffiliations
         ON @conferencePapers.PaperId == @paperAuthorAffiliations.PaperId
         INNER JOIN
             @authors
         ON @paperAuthorAffiliations.AuthorId == @authors.AuthorId;


//Aggregate static rank and publication for each author 
@conferenceAuthorRanks =
    SELECT ANY_VALUE(@conferenceAuthorsPapers.AuthorName) AS AuthorName, //Guaranteed to have only 1 value since AuthorId is the key
           COUNT( * ) AS PublicationCount,
           SUM(Math.Exp(@conferenceAuthorsPapers.LogProbRank)) AS AuthorProbRank //Adding paper rank up to create author rank
    FROM @conferenceAuthorsPapers
    GROUP BY @conferenceAuthorsPapers.AuthorId
    ORDER BY AuthorProbRank DESC
    FETCH @conferenceTopAuthorsCount ROWS; //Only take top @conferenceTopAuthorsCount authors


//Create two ranks based on different methods to display on the x and y axis for comparison
@conferenceAuthorRanks =
    SELECT AuthorName,
           PublicationCount,
           RANK() OVER(ORDER BY AuthorProbRank DESC) AS AuthorRank,
           RANK() OVER(ORDER BY (AuthorProbRank / PublicationCount) DESC) AS AuthorNormalizedRank //Consider average quality of paper instead of sum
    FROM @conferenceAuthorRanks;


OUTPUT @conferenceAuthorRanks
TO @authorRankOutPath
USING Outputters.Tsv(outputHeader : true);
