// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//Make sure to run CreateDatabase script from common scripts first!
USE DATABASE AcdemicGraph;

//*******************Input Variable Section********************************
//        Change these variables for different calculations
//*************************************************************************
DECLARE @conferenceShortName string = "WWW"; //Conference abbreviated name 
DECLARE @conferenceTopAuthorsCount int = 20;  //Number of top authors to output

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/";
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + @conferenceShortName + "/";

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @authorRankOutPath string = @outputBaseDir + "conferenceTopAuthorsByStaticRank.tsv";




//First find the conference series id by matching conference short name.
@targetConferenceSeriesId =
    SELECT (long?) ConferenceSeriesId AS ConferenceSeriesId //Cast long to long? to join against Paper table
    FROM ConferenceSeries
    WHERE NormalizedName == @conferenceShortName;


//Get all conference papers by conference series Id.
@conferencePapers =
    SELECT Paper.PaperId,
           (Paper.Rank * -0.001) AS LogProbRank //Rank is stored in the graph as LogProbRank*-1000
    FROM Paper
         INNER JOIN
             @targetConferenceSeriesId
         ON Paper.ConferenceSeriesId == @targetConferenceSeriesId.ConferenceSeriesId;


//Get all [conference paper] -> [conference author] relationships
@conferenceAuthorsPapers =
    SELECT Author.DisplayName AS AuthorName,
           Author.AuthorId,
           @conferencePapers.PaperId,
           @conferencePapers.LogProbRank AS LogProbRank 
    FROM @conferencePapers
         INNER JOIN
             PaperAuthorAffiliation
         ON @conferencePapers.PaperId == PaperAuthorAffiliation.PaperId
         INNER JOIN
             Author
         ON PaperAuthorAffiliation.AuthorId == Author.AuthorId;


//Aggregate static rank and publication for each author 
@conferenceAuthorRanks =
    SELECT ANY_VALUE(@conferenceAuthorsPapers.AuthorName) AS AuthorName, //Guaranteed to have only 1 value since AuthorId is the key
           COUNT( * ) AS PublicationCount,
           SUM(Math.Exp(@conferenceAuthorsPapers.LogProbRank)) AS AuthorProbRank //Adding paper rank up to create author rank
    FROM @conferenceAuthorsPapers
    GROUP BY @conferenceAuthorsPapers.AuthorId
    ORDER BY AuthorProbRank DESC
    FETCH @conferenceTopAuthorsCount ROWS; //Only take top @conferenceTopAuthorsCount authors


//Create two ranks based on different methods to display on the x and y axis for comparison
@conferenceAuthorRanks =
    SELECT AuthorName,
           PublicationCount,
           RANK() OVER(ORDER BY AuthorProbRank DESC) AS AuthorRank,
           RANK() OVER(ORDER BY (AuthorProbRank / PublicationCount) DESC) AS AuthorNormalizedRank //Consider average quality of paper instead of sum
    FROM @conferenceAuthorRanks;


OUTPUT @conferenceAuthorRanks
TO @authorRankOutPath
USING Outputters.Tsv(outputHeader : true);
