// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// To do:
//   1. Run samples/CreateFunctions.usql to define functions before running this script
//   2. Replace <AzureStorageAccount> with your Azure Storage account containing MAG dataset
//   3. Replace <MagContainer> with the container name in Azure Storage account containing MAG dataset, usually in the form of mag-yyyy-mm-dd
//

DECLARE @blobAccount     string = "<AzureStorageAccount>";
DECLARE @blobContainer   string = "<MagContainer>";
DECLARE @uriPrefix       string = "wasb://" + @blobContainer + "@" + @blobAccount + "/";

//*******************Input Variable Section********************************
//        Change these variables for different calculations
//*************************************************************************
DECLARE @conferenceShortName string = "WWW";  //Conference abbreviated name 
DECLARE @conferenceTopInstitutionsCount int = 20;  //Number of top institutions to output

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/";
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + @conferenceShortName + "/";
DECLARE @maDetailPagePrefix = @"https://academic.microsoft.com/institution/";

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @conferenceTopInstitutionsOutPath string = @outputBaseDir + "conferenceTopInstitutions.tsv";


// Load Academic Graph data
@conferenceSeries = ConferenceSeries(@uriPrefix);
@papers = Papers(@uriPrefix);
@paperAuthorAffiliations = PaperAuthorAffiliations(@uriPrefix);
@affiliations = Affiliations(@uriPrefix);


//First find the conference series id by matching conference short name.
@targetConferenceSeriesId =
    SELECT (long?) ConferenceSeriesId AS ConferenceSeriesId //Cast long to long? to join against Paper table
    FROM @conferenceSeries
    WHERE NormalizedName == @conferenceShortName;


//Get all conference papers by conference series Id.
@conferencePapers =
    SELECT @papers.PaperId,
           @papers.CitationCount,
           @papers.ConferenceSeriesId
    FROM @papers
         INNER JOIN
             @targetConferenceSeriesId
         ON @papers.ConferenceSeriesId == @targetConferenceSeriesId.ConferenceSeriesId;


//Get all [paper] -> [affiliation] relationship from [paper] -> [author, affiliation]
@paperAffiliation =
    SELECT PaperId,
           (long) AffiliationId AS AffiliationId //Saftely cast from long? to long 
    FROM @paperAuthorAffiliations
    WHERE AffiliationId IS NOT NULL; 


//Get all distinct [conference paper] -> [affiliation] relationships
@conferenceAffiliationsPapers =
    SELECT ANY_VALUE(@affiliations.DisplayName) AS InstitutionName,
           @affiliations.AffiliationId,
           @conferencePapers.PaperId,
           ANY_VALUE(@conferencePapers.CitationCount) AS CitationCount
    FROM @conferencePapers
         INNER JOIN
             @paperAffiliation
         ON @conferencePapers.PaperId == @paperAffiliation.PaperId
         INNER JOIN
             @affiliations
         ON @paperAffiliation.AffiliationId == @affiliations.AffiliationId
    //Each paper may have mutiple authors from the same institution.
    //We want to have distinct [conference paper] -> [affiliation] relationships so we don't double count
    GROUP BY @conferencePapers.PaperId, @affiliations.AffiliationId;


//Get top institution by its all time citation count
@conferenceTopInstitutions =
    SELECT ANY_VALUE(@conferenceAffiliationsPapers.InstitutionName) AS InstitutionName, //Guaranteed to have only 1 value since AffiliationId is the key
           @maDetailPagePrefix + @conferenceAffiliationsPapers.AffiliationId AS DetailsUrl,
           COUNT( * ) AS PublicationCount,
           SUM(@conferenceAffiliationsPapers.CitationCount) AS CitationCount
    FROM @conferenceAffiliationsPapers
    GROUP BY @conferenceAffiliationsPapers.AffiliationId
    ORDER BY CitationCount DESC
    FETCH @conferenceTopInstitutionsCount ROWS; //Only take top @conferenceTopInstitutionsCount institutions.


//Create two ranks based on publication and citation to display on the x and y axis for comparison
@conferenceTopInstitutions = 
    SELECT @conferenceTopInstitutions.InstitutionName,
           @conferenceTopInstitutions.DetailsUrl,
           @conferenceTopInstitutions.PublicationCount,
           @conferenceTopInstitutions.CitationCount,
           RANK() OVER(ORDER BY @conferenceTopInstitutions.CitationCount DESC) AS InstitutionCitationRank,
           RANK() OVER(ORDER BY @conferenceTopInstitutions.PublicationCount DESC) AS InstitutionPublicationRank
    FROM @conferenceTopInstitutions;
 
 
OUTPUT @conferenceTopInstitutions
TO @conferenceTopInstitutionsOutPath
USING Outputters.Tsv(outputHeader : true);         