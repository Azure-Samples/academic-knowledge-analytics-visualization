//Make sure to run CreateDatabase script from common scripts first!
USE DATABASE AcdemicGraph;

//Change this variable to do calculation for different conferences
DECLARE @conferenceShortName string = "WWW";  

//This output path is hardcoded to pbi file. If this is changed, pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/"; 
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + @conferenceShortName + "/";

//Files output from this script
DECLARE @venueOutPath string =  @outputBaseDir + "venue.tsv";
DECLARE @conferenceReferenceVenueOutPath string = @outputBaseDir + "conferenceReferenceVenue.tsv";
DECLARE @conferenceYearlyReferenceVenueOutPath string = @outputBaseDir + "conferenceYearlyReferenceVenue.tsv";


//The visualization can join against this table to get venue information. Since this isn't a large set of data, we can directly output it
@venues =
    SELECT ConferenceSeries.ConferenceSeriesId AS VenueId,
           ConferenceSeries.NormalizedName AS VenueShortName,
           ConferenceSeries.DisplayName AS VenueName
    FROM ConferenceSeries
    UNION
    SELECT Journal.JournalId AS VenueId,
           Journal.NormalizedName AS VenueShortName,
           Journal.DisplayName AS VenueName
    FROM Journal;

OUTPUT @venues
TO @venueOutPath
USING Outputters.Tsv(outputHeader : true);

//Get all conference papers. 
//Cast ConferenceSeriesId to long from long? so join operations can be performed.
@allconferencePapers =
    SELECT PaperId,
           Year,
           (long)ConferenceSeriesId AS ConferenceSeriesId  //Cast from long? to long
    FROM Paper
    WHERE ConferenceSeriesId IS NOT NULL;

//Get all conference papers by normalized conference series name
@conferencePapers =
    SELECT @allconferencePapers.PaperId,
           @allconferencePapers.Year,
           @allconferencePapers.ConferenceSeriesId AS VenueId
    FROM @allconferencePapers
         JOIN
             ConferenceSeries
         ON  @allconferencePapers.ConferenceSeriesId == ConferenceSeries.ConferenceSeriesId
    WHERE ConferenceSeries.NormalizedName == @conferenceShortName;

//Get relationships between conferencePaper -> referencedPaper
@conferenceReferencedPapers =
    SELECT @conferencePapers.PaperId,
           @conferencePapers.Year,
           @conferencePapers.VenueId,
           Paper.PaperId AS ReferenceId,
           Paper.Year AS ReferenceYear,
           Paper.ConferenceSeriesId == null? JournalId : ConferenceSeriesId AS ReferenceVenueId
    FROM Paper
         JOIN
             PaperReference
         ON Paper.PaperId == PaperReference.PaperReferenceId
         JOIN
             @conferencePapers
         ON PaperReference.PaperId == @conferencePapers.PaperId;

//Count # of references between conference and referenced conference
//Keep VenueId and ReferenceVenueId such that the visulization can join directly with Venue table to get venue names
@conferencePaperReferenceByVenues =
    SELECT @conferenceReferencedPapers.VenueId,
           @conferenceReferencedPapers.ReferenceVenueId,
           COUNT( * ) AS ReferenceCount
    FROM @conferenceReferencedPapers
    GROUP BY @conferenceReferencedPapers.VenueId,
             @conferenceReferencedPapers.ReferenceVenueId;

OUTPUT @conferencePaperReferenceByVenues
TO @conferenceReferenceVenueOutPath
USING Outputters.Tsv(outputHeader : true);

//For each yeah of conference, count # of references between conference and referenced conference
//Keep VenueId and ReferenceVenueId such that the visulization can join directly with Venue table to get venue names
@conferencePaperReferenceByYearsReferenceVenues =
    SELECT @conferenceReferencedPapers.Year,
           @conferenceReferencedPapers.ReferenceVenueId,
           COUNT( * ) AS ReferenceCount
    FROM @conferenceReferencedPapers
    GROUP BY @conferenceReferencedPapers.Year,
             @conferenceReferencedPapers.ReferenceVenueId;

OUTPUT @conferencePaperReferenceByYearsReferenceVenues
TO @conferenceYearlyReferenceVenueOutPath
USING Outputters.Tsv(outputHeader : true);