// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// To do:
//   1. Run samples/CreateFunctions.usql to define functions before running this script
//   2. Replace <AzureStorageAccount> with your Azure Storage account containing MAG dataset
//   3. Replace <MagContainer> with the container name in Azure Storage account containing MAG dataset, usually in the form of mag-yyyy-mm-dd
//

DECLARE @blobAccount     string = "<AzureStorageAccount>";
DECLARE @blobContainer   string = "<MagContainer>";
DECLARE @uriPrefix       string = "wasb://" + @blobContainer + "@" + @blobAccount + "/";

//*******************Input Variable Section********************************
//        Change these variables for different calculations
//*************************************************************************
DECLARE @organizationName string = "microsoft";
DECLARE @organizationPaperMinYear int = 1991;

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @outputBaseDir string = @"/output/organizationInsight/" + Uri.EscapeUriString(@organizationName)+ "/";
DECLARE @maDetailPagePrefix = @"https://academic.microsoft.com/#/detail/";

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @affiliationOutPath string = @outputBaseDir + "Affiliation.tsv";
DECLARE @partnerAffiliationOutPath string = @outputBaseDir + "Partner_Affiliation.tsv";
DECLARE @papersOutPath string = @outputBaseDir + "Paper.tsv";
DECLARE @authorsOutPath string = @outputBaseDir + "Author.tsv";
DECLARE @partnerAuthorsOutPath string = @outputBaseDir + "Partner_Author.tsv";
DECLARE @paperAuthorAffiliationRelationshipOutPath string = @outputBaseDir + "PaperAuthorAffiliationRelationship.tsv";
DECLARE @partnerPaperAuthorAffiliationRelationshipOutPath string = @outputBaseDir + "Partner_PaperAuthorAffiliationRelationship.tsv";
DECLARE @venueOutPath string = @outputBaseDir + "Venue.tsv";
DECLARE @paperFieldOfStudyOutPath string = @outputBaseDir + "PaperFieldOfStudyRelationship.tsv";
DECLARE @fieldOfStudyOutPath string = @outputBaseDir + "FieldOfStudy.tsv";


// Load Academic Graph data
@affiliations = Affiliations(@uriPrefix);
@paperAuthorAffiliations = PaperAuthorAffiliations(@uriPrefix);
@papers = Papers(@uriPrefix);
@authors = Authors(@uriPrefix);
@paperFieldsOfStudy = PaperFieldsOfStudy(@uriPrefix);
@fieldsOfStudy = FieldsOfStudy(@uriPrefix);
@conferenceSeries = ConferenceSeries(@uriPrefix);
@journals = Journals(@uriPrefix);


//Find the affiliation for the input organization
@targetAffiliation =
    SELECT 
        AffiliationId, 
        DisplayName AS AffiliationName
    FROM @affiliations
    WHERE NormalizedName == @organizationName;


OUTPUT @targetAffiliation
TO @affiliationOutPath
USING Outputters.Tsv(outputHeader:true);


@targetAffiliationId =
    SELECT (long?) AffiliationId AS AffiliationId //Cast long to long? to join against Paper table
    FROM @targetAffiliation;


//Get all [Paper]->[Author]->[Affiliation(input organization] relationships
@orgPaperAuthorAffiliation =
    SELECT @paperAuthorAffiliations.PaperId,
           @paperAuthorAffiliations.AuthorId,
           @targetAffiliationId.AffiliationId,
           @paperAuthorAffiliations.AuthorSequenceNumber
    FROM @paperAuthorAffiliations
         INNER JOIN
             @targetAffiliationId
         ON @paperAuthorAffiliations.AffiliationId == @targetAffiliationId.AffiliationId;


OUTPUT @orgPaperAuthorAffiliation
TO @paperAuthorAffiliationRelationshipOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all org author Ids
@orgAuthorIds =
    SELECT DISTINCT AuthorId
    FROM @orgPaperAuthorAffiliation;


//Get all org author details
@orgAuthors =
    SELECT @orgAuthorIds.AuthorId,
           @authors.DisplayName AS AuthorName
    FROM @authors
         INNER JOIN
             @orgAuthorIds
         ON @authors.AuthorId == @orgAuthorIds.AuthorId;


OUTPUT @orgAuthors
TO @authorsOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all paper Ids for the input organization
@orgPaperIds =
    SELECT DISTINCT PaperId
    FROM @orgPaperAuthorAffiliation;


//Get all org paper details
@orgPapers =
    SELECT @papers.PaperId,
           @papers.PaperTitle AS Title,
           @papers.EstimatedCitation AS CitationCount,
           @papers.Date,
           //Use "Not avaliable" to represent the publication type if it is unknown.
           String.IsNullOrEmpty(@papers.DocType) ? "Not avaliable" : @papers.DocType AS PublicationType,
           Math.Exp(@papers.Rank * -0.001) AS LogProb,
           @maDetailPagePrefix + @papers.PaperId AS Url,
           @papers.ConferenceSeriesId == null ? @papers.JournalId : @papers.ConferenceSeriesId AS VId,
           Year
    FROM @papers
         INNER JOIN
             @orgPaperIds
         ON @papers.PaperId == @orgPaperIds.PaperId
    WHERE Year >= @organizationPaperMinYear;


OUTPUT @orgPapers
TO @papersOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all [Paper]->[Author/Affiliation] relationships for the org
@orgAllPaperAuthorAffiliations =
    SELECT @orgPapers.PaperId,
           @paperAuthorAffiliations.AuthorId,
           @paperAuthorAffiliations.AffiliationId,
           @paperAuthorAffiliations.AuthorSequenceNumber
    FROM @paperAuthorAffiliations
         JOIN
             @orgPapers
         ON @paperAuthorAffiliations.PaperId == @orgPapers.PaperId;


//All distinct affiliation id from [Paper] -> [Author/Affiliation] relationship are the partner affiliations
@orgPartnerPaperAuthorAffiliations =
        SELECT 
            PaperId,
            AuthorId,
            AffiliationId,
            AuthorSequenceNumber
        FROM @orgAllPaperAuthorAffiliations
    EXCEPT
//Don't include target org's affiliation in the distinct
        SELECT 
            PaperId,
            AuthorId,
            AffiliationId,
            AuthorSequenceNumber
        FROM @orgPaperAuthorAffiliation;


OUTPUT @orgPartnerPaperAuthorAffiliations
TO @partnerPaperAuthorAffiliationRelationshipOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all partner orgs' affiliation Ids
@orgPartnerAffiliationIds =
    SELECT DISTINCT (long)AffiliationId AS AffiliationId
    FROM @orgPartnerPaperAuthorAffiliations
    WHERE AffiliationId != NULL;


//Get all partner orgs' affiliation details
@orgPartnerAffiliations =
    SELECT @orgPartnerAffiliationIds.AffiliationId,
           @affiliations.DisplayName AS AffiliationName
    FROM @affiliations
         INNER JOIN
             @orgPartnerAffiliationIds
         ON @affiliations.AffiliationId == @orgPartnerAffiliationIds.AffiliationId;


OUTPUT @orgPartnerAffiliations
TO @partnerAffiliationOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all partner authors' Ids
@orgPartnerAuthorIds =
    SELECT DISTINCT AuthorId
    FROM @orgPartnerPaperAuthorAffiliations;


//Get all partner authors' details
@orgPartnerAuthors =
    SELECT @orgPartnerAuthorIds.AuthorId,
           @authors.DisplayName AS AuthorName
    FROM @authors
         INNER JOIN
             @orgPartnerAuthorIds
         ON @authors.AuthorId == @orgPartnerAuthorIds.AuthorId;


OUTPUT @orgPartnerAuthors
TO @partnerAuthorsOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all [Paper]->[Field of Study] relationships for the input organization
@orgPaperFieldOfStudy =
    SELECT @orgPapers.PaperId,
           @paperFieldsOfStudy.FieldOfStudyId
    FROM @paperFieldsOfStudy
         INNER JOIN
             @orgPapers
         ON @paperFieldsOfStudy.PaperId == @orgPapers.PaperId;


OUTPUT @orgPaperFieldOfStudy
TO @paperFieldOfStudyOutPath
USING Outputters.Tsv(outputHeader:true);


//Get all Field of Study Ids for the input organization
@orgFieldOfStudyIds =
    SELECT DISTINCT FieldOfStudyId
    FROM @orgPaperFieldOfStudy;


//Get all fields of study details for the input organization
@fieldOfStudyOut =
    SELECT @orgFieldOfStudyIds.FieldOfStudyId,
           @fieldsOfStudy.Level AS FieldLevel,
           @fieldsOfStudy.DisplayName AS FieldName
    FROM @fieldsOfStudy
         INNER JOIN
             @orgFieldOfStudyIds
         ON @fieldsOfStudy.FieldOfStudyId == @orgFieldOfStudyIds.FieldOfStudyId;


OUTPUT @fieldOfStudyOut
TO @fieldOfStudyOutPath
USING Outputters.Tsv(outputHeader:true);  


//Get all Conference/Journal details as Venue details
@venue =
    SELECT ConferenceSeriesId AS VId,
           DisplayName AS VenueName,
           NormalizedName AS VenueShortName
    FROM @conferenceSeries
UNION
    SELECT JournalId AS VId,
           DisplayName AS VenueName,
           NormalizedName AS VenueShortName
    FROM @journals;


OUTPUT @venue
TO @venueOutPath
USING Outputters.Tsv(outputHeader:true);   